package org.bob.android.app.contactmanager.persistence.beans;

import android.content.ContentValues;
import android.database.Cursor;
import android.util.Log;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;
import org.bob.android.app.contactmanager.utilities.Constants;
import org.bob.android.app.contactmanager.utilities.DBConstants;
import org.bob.android.app.contactmanager.utilities.Logger;

/**
 * Created by roberto.gatti on 04/09/2014.
 */
@DatabaseTable(tableName = DBConstants.RELATION_TABLE_NAME)
public class RelationBean extends BaseObject
{

    public static final String[] PROJECTION = new String[4] ;

    // id is generated by the database and set on the object automagically
    @DatabaseField(generatedId = true, columnName = DBConstants.DEFAULT_ID_FIELD_NAME)
    private int id;

    @DatabaseField(index = true, columnName = DBConstants.RELATION_CONTACT_ID_FIELD_NAME)
    private int contact_id;

    @DatabaseField(index = true, columnName = DBConstants.RELATION_OBJECT_ID_FIELD_NAME)
    private int object_id;

    @DatabaseField(index = true, columnName = DBConstants.RELATION_OBJECT_TYPE_FIELD_NAME)
    private char object_type;

    private BaseObject object;

    static
    {
        PROJECTION[0] = DBConstants.DEFAULT_ID_FIELD_NAME;
        PROJECTION[1] = DBConstants.RELATION_CONTACT_ID_FIELD_NAME;
        PROJECTION[2] = DBConstants.RELATION_OBJECT_ID_FIELD_NAME;
        PROJECTION[3] = DBConstants.RELATION_OBJECT_TYPE_FIELD_NAME;
    }

    /**
     * Costruttore di default (per ormlite)
     */
    public RelationBean() { }

    /**
     * Costruttore col solo id.
     * @param id
     */
    public RelationBean(int id)
    {
        this.setId(id);
    }

    /**
     * Costruttore full.
     * @param id
     * @param c
     * @param o
     */
    public RelationBean(int id, ContactBean c, BaseObject o)
    {
        this.setId(id);
        this.setContact(c);
        this.setObject(o);
        c.addRelation(this);
    }

    public RelationBean(int id, int c_id, int o_id, char o_type)
    {
        this.setId(id);
        this.contact_id = c_id;
        this.object_id = o_id;
        this.object_type = o_type;
    }

    /**
     * Costruttore per il recupero dell'oggetto da db.
     * @param cursor
     */
    public RelationBean(Cursor cursor)
    {
        // Il cursor in input arriva dalla view. I campi non sono quelli della tabella.
        /*
                    DBConstants.CONTACT_DETAILS_R_ID_FIELD_NAME
                    DBConstants.CONTACT_DETAILS_C_ID_FIELD_NAME +
                    DBConstants.CONTACT_DETAILS_OBJECT_TYPE_FIELD_NAME +
                    DBConstants.CONTACT_DETAILS_O_ID_FIELD_NAME +
                    DBConstants.CONTACT_DETAILS_OBJ_FIELD_NAME +
         */
        if ( cursor != null )
        {
            this.setId(cursor.getInt(cursor.getColumnIndex(DBConstants.CONTACT_DETAILS_R_ID_FIELD_NAME)));
            this.contact_id = cursor.getInt(cursor.getColumnIndex(DBConstants.CONTACT_DETAILS_C_ID_FIELD_NAME));
            this.object_id = cursor.getInt(cursor.getColumnIndex(DBConstants.CONTACT_DETAILS_O_ID_FIELD_NAME));
            this.object_type = cursor.getString(cursor.getColumnIndex(DBConstants.CONTACT_DETAILS_OBJECT_TYPE_FIELD_NAME)).charAt(0);
            String objectStr = cursor.getString(cursor.getColumnIndex(DBConstants.CONTACT_DETAILS_OBJ_FIELD_NAME));
            switch ( this.object_type )
            {
                case Constants.ADDRESS_TYPE_INDICATOR:
                    this.object = new AddressBean(this.object_id, objectStr);
                    break;
                case Constants.EMAIL_TYPE_INDICATOR:
                    this.object = new EmailBean(this.object_id, objectStr);
                    break;
                case Constants.PHONE_TYPE_INDICATOR:
                    this.object = new PhoneBean(this.object_id, objectStr);
                    break;
                default:
                    throw new RuntimeException("ERRORE: tipo oggetto non valido; " + String.valueOf(this.object_type));
            }
        }
    }

    /**
     * Costruttore porcata legato all'integrazione ORMLite - ContentProvider...
     * @param cv
     */
    public RelationBean(ContentValues cv)
    {
        this.contact_id  = ((Integer) cv.get(DBConstants.RELATION_CONTACT_ID_FIELD_NAME)).intValue();
        this.object_id   = ((Integer) cv.get(DBConstants.RELATION_OBJECT_ID_FIELD_NAME)).intValue();
        this.object_type = ((String) cv.get(DBConstants.RELATION_OBJECT_TYPE_FIELD_NAME)).charAt(0);
        if ( cv.get(DBConstants.DEFAULT_ID_FIELD_NAME) != null )
            this.setId(Integer.parseInt(cv.get(DBConstants.DEFAULT_ID_FIELD_NAME).toString()));
    }

    /* ********************************************************************* */
    /*                           SETTER AND GETTER                           */
    /* ********************************************************************* */

    @Override
    public void setId(int id) { this.id = id;  super.set_Id(this.id);}
    public void setContact(ContactBean c) { this.contact_id = c.getId(); }
    public void setObject(BaseObject obj)
    {
        if ( obj instanceof PhoneBean        ) { this.object_type = 'T'; this.object_id = ((PhoneBean)   obj).getId(); this.object = obj; }
        else if ( obj instanceof EmailBean   ) { this.object_type = 'M'; this.object_id = ((EmailBean)   obj).getId(); this.object = obj; }
        else if ( obj instanceof AddressBean ) { this.object_type = 'A'; this.object_id = ((AddressBean) obj).getId(); this.object = obj; }
    }

    @Override
    public int getId() { return this.id; }
    public int getContactId() { return this.contact_id; }
    public char getObjectType() { return this.object_type; }
    public int getObjectId() { return this.object_id; }
    public BaseObject getObject() { return this.object; }

    /* ********************************************************************* */
    /*                          OVERRIDDEN METHODS                           */
    /* ********************************************************************* */

    /*       Object class     */

    @Override
    public int hashCode()
    {
        int hashcode = 1;
        // hashcode += ( Math.abs(this.getId()) * 11 );
        hashcode += (this.getContactId() * 11);
        hashcode += (this.getObjectId() * 11);
        hashcode += (this.getObjectType() * 17);
        return hashcode;
    }

    @Override
    public boolean equals(Object o)
    {
        if ( o instanceof RelationBean )
        {
            RelationBean obj = (RelationBean) o;
            if ( obj == null )
            {
                Logger.v(this.getClass(), "RelationBean.equals: parametro a null!");
                return false;
            }
            // Se hanno l'id valorizzato controllo semplicemente l'hashcode
            if ( this.getId() > 0 && obj.getId() > 0)
            {
                Logger.v(this.getClass(), "|-- Id degli oggetti sono uguali? --> " + String.valueOf(this.getId() == obj.getId()));
                return this.getId() == obj.getId() ? true : false;
            }
            // ... altrimenti controllo l'hashcode
            Logger.v(this.getClass(), "|-- hashcode dei due oggetti: this: " + this.hashCode() + " -- param :" + obj.hashCode() );
            return this.hashCode() == obj.hashCode();
        }
        else
        {
            Logger.v(this.getClass(), "RelationBean.equals: parametro non di tipo RelationBean");
            return false;
        }
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        super.clone();
        return new RelationBean(this.getId(), this.getContactId(), this.getObjectId(), this.getObjectType());
    }

    @Override
    public String getDescription()
    {
        return this.getContactId() + ", " + this.getObjectType() + ", " + this.getObjectId();
    }

    @Override
    public ContentValues getContentValues()
    {
        ContentValues cv = new ContentValues();
        cv.put(DBConstants.OBJECT_CLASS_TYPE_KEY, this.getClass().getName());
        cv.put(DBConstants.RELATION_CONTACT_ID_FIELD_NAME, this.getContactId());
        cv.put(DBConstants.RELATION_OBJECT_ID_FIELD_NAME, this.getObjectId());
        cv.put(DBConstants.RELATION_OBJECT_TYPE_FIELD_NAME, String.valueOf(this.getObjectType()));
        return cv;
    }
}
