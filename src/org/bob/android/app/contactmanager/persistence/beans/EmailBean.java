package org.bob.android.app.contactmanager.persistence.beans;

import android.content.ContentValues;
import android.database.Cursor;
import android.util.Log;
import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;
import org.bob.android.app.contactmanager.utilities.DBConstants;
import org.bob.android.app.contactmanager.utilities.Logger;

/**
 * Created by roberto.gatti on 04/09/2014.
 */
@DatabaseTable(tableName = DBConstants.EMAIL_TABLE_NAME)
public class EmailBean extends BaseObject
{

    public static final String[] PROJECTION = new String[4] ;

    // id is generated by the database and set on the object automagically
    @DatabaseField(generatedId = true, columnName = DBConstants.DEFAULT_ID_FIELD_NAME)
    private int id;

    @DatabaseField(index = true, columnName = DBConstants.EMAIL_EMAIL_FIELD_NAME, dataType = DataType.STRING)
    private String email;

    @DatabaseField
    private long tmst_upd;

    @DatabaseField
    private long tmst_ins;


    /**
     * Costruttore di default (per ormlite)
     */
    public EmailBean() { }

    /**
     * Costruttore col solo id.
     * @param id
     */
    public EmailBean(int id)
    {
        this.setId(id);
    }

    /**
     * Costruttore full.
     * @param id
     * @param email
     */
    public EmailBean(int id, String email)
    {
        this.setId(id);
        this.setEMail(email);
    }

    /**
     * Costruttore porcata legato all'integrazione ORMLite - ContentProvider...
     * @param cv
     */
    public EmailBean(ContentValues cv)
    {
        this.setEMail((String) cv.get(DBConstants.EMAIL_EMAIL_FIELD_NAME));
        if ( cv.get(DBConstants.DEFAULT_ID_FIELD_NAME) != null )
            this.setId(Integer.parseInt(cv.get(DBConstants.DEFAULT_ID_FIELD_NAME).toString()));
    }

    /**
     * Costruttore per il recupero dell'oggetto da db.
     * @param cursor
     */
    public EmailBean(Cursor cursor)
    {
        if ( cursor != null )
        {
            this.setId(cursor.getInt(cursor.getColumnIndex(DBConstants.DEFAULT_ID_FIELD_NAME)));
            this.setEMail(cursor.getString(cursor.getColumnIndex(DBConstants.EMAIL_EMAIL_FIELD_NAME)));
        }
    }
    /* ********************************************************************* */
    /*                           SETTER AND GETTER                           */
    /* ********************************************************************* */

    @Override
    public void setId(int id) { this.id = id; super.set_Id(this.id); }
    public void setEMail(String email) { this.email = email; }

    @Override
    public int getId() { return this.id; }
    public String getEMail() { return this.email; }

    /* ********************************************************************* */
    /*                          OVERRIDDEN METHODS                           */
    /* ********************************************************************* */

    /*       Object class     */

    @Override
    public int hashCode()
    {
        int hashcode = 1;
        // hashcode += ( Math.abs(this.getId()) * 11 );
        hashcode += (this.getEMail().toUpperCase().hashCode() * 13);
        return hashcode;
    }

    @Override
    public boolean equals(Object o)
    {
        if ( o instanceof EmailBean )
        {
            EmailBean obj = (EmailBean) o;
            if ( obj == null )
            {
                Logger.v(this.getClass(), "EmailBean.equals: parametro a null!");
                return false;
            }
            // Se hanno l'id valorizzato controllo semplicemente l'hashcode
            if ( this.getId() > 0 && obj.getId() > 0)
            {
                Logger.v(this.getClass(), "|-- Id degli oggetti sono uguali? --> " + String.valueOf(this.getId() == obj.getId()));
                return this.getId() == obj.getId() ? true : false;
            }
            // ... altrimenti controllo l'hashcode
            Logger.v(this.getClass(), "|-- hashcode dei due oggetti: this: " + this.hashCode() + " -- param :" + obj.hashCode() );
            return this.hashCode() == obj.hashCode();
        }
        else
        {
            Logger.v(this.getClass(), "EmailBean.equals: parametro non di tipo EmailBean");
            return false;
        }
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        return new EmailBean(this.getId(), this.getEMail());
    }

    @Override
    public String getDescription()
    {
        return this.getEMail();
    }

    @Override
    public ContentValues getContentValues()
    {
        ContentValues cv = new ContentValues();
        cv.put(DBConstants.OBJECT_CLASS_TYPE_KEY, this.getClass().getName());
        cv.put(DBConstants.EMAIL_EMAIL_FIELD_NAME, this.getEMail());
        return cv;
    }

}
